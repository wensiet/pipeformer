stages:
  - build
  - validate
  - provision
  - post-scripts

variables:
  IMAGE_NAME: "registry.gitlab.com/pipeform/pipeformer"


build-on-code-change:
  stage: build
  image: docker:dind
  services:
    - docker:dind
  only:
    changes:
      - src/**/*
      - pyproject.toml
      - poetry.lock
      - Dockerfile
      - .gitlab-ci.yml
    refs:
      - main
  script:
    - docker info
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - export VERSION_TAG=$(if [ "$CI_COMMIT_TAG" != "" ]; then echo "$CI_COMMIT_TAG"; else echo "$CI_COMMIT_REF_NAME-${CI_COMMIT_SHORT_SHA}"; fi)
    - docker build -t $IMAGE_NAME:$VERSION_TAG -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$VERSION_TAG
    - docker push $IMAGE_NAME:latest

validate-configuration:
  image: $IMAGE_NAME:latest
  stage: validate
  only:
    changes:
      - compute/**/*
  script:
    - python cli.py --old-sha $CI_COMMIT_SHA --new-sha main validate


provision-compute:
  image: $IMAGE_NAME:latest
  stage: provision
  only:
    changes:
      - compute/**/*
    refs:
      - main
  script:
    - python cli.py --old-sha $CI_COMMIT_SHA --new-sha main provision

apply-playbooks:
  image: $IMAGE_NAME:latest
  stage: post-scripts
  only:
    changes:
      - compute/**/*
    refs:
      - main
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_SERVICE" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - python cli.py --old-sha $CI_COMMIT_SHA --new-sha main playbooks
